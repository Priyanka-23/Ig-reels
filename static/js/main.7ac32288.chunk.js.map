{"version":3,"sources":["VideoHeader.js","VideoFooter.js","VideoCard.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["videoHeader","className","VideoFooter","channel","song","likes","shares","avatarSrc","Avatar","src","Button","mode","index","fontSize","VideoCard","url","useState","isVideoPlaying","setIsVideoPlaying","videoRef","useRef","ref","onClick","current","pause","play","alt","loop","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","reels","setReels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7ac32288.chunk.js","sourcesContent":["import React from 'react';\r\nimport './VideoHeader.css';\r\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\r\nimport CameraAltOutlinedIcon from \"@material-ui/icons/CameraAltOutlined\";\r\nfunction videoHeader(){\r\n    return(\r\n        <div className=\"videoHeader\">\r\n            <ArrowBackIosIcon/>\r\n            <h3>Reels</h3>\r\n            <CameraAltOutlinedIcon/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default videoHeader;","import React from 'react';\r\nimport './VideoFooter.css';\r\nimport {Button, Avatar} from \"@material-ui/core\";\r\nimport MusicNoteIcon from \"@material-ui/icons/MusicNote\";\r\nimport Ticker from \"react-ticker\";\r\nimport ModeCommentIcon from \"@material-ui/icons/ModeComment\";\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\n\r\nfunction VideoFooter({channel, song, likes, shares, avatarSrc }){\r\n    return(\r\n        <div className=\"videoFooter\">\r\n            <div className=\"videoFooter_text\">               \r\n                <Avatar src={avatarSrc}/>\r\n                <h3>\r\n                {channel} â€¢ <Button> Follow </Button>\r\n                </h3>\r\n            </div> \r\n            <div className=\"videoFooter_ticker\">\r\n                <MusicNoteIcon className=\"videoFooter_icon\"/>\r\n                <Ticker mode=\"smooth\">\r\n                    { ( { index } ) =>(\r\n                        <>\r\n                        <h1>{song}</h1>\r\n                        </>\r\n                    )}\r\n                </Ticker>\r\n            </div>\r\n            <div className=\"videoFooter_actions\">\r\n                <div className=\"videoFooter_actionsLeft\">\r\n                    <FavoriteIcon/>\r\n                    <ModeCommentIcon />\r\n                    <SendIcon />\r\n                    <MoreHorizIcon />\r\n                </div>\r\n                <div className=\"videoFooter_actionsRight\">\r\n                   <div className=\"videoFooter_stat\">\r\n                       <FavoriteIcon  fontSize=\"medium\"/>\r\n                       <p>{likes}</p>\r\n                       </div>\r\n                    <div className=\"videoFooter_stat\">\r\n                        <ModeCommentIcon  fontSize=\"small\"/>\r\n                        <p>{shares}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default VideoFooter;","import React, { useRef, useState } from 'react';\r\nimport './VideoCard.css';\r\nimport VideoHeader from './VideoHeader';\r\nimport VideoFooter from './VideoFooter';\r\n\r\nfunction VideoCard({url, likes, shares, channel, avatarSrc, song}){\r\n    const[isVideoPlaying, setIsVideoPlaying] =useState(false);\r\n    const videoRef=useRef (null);//reference is like a pointer pointing something\r\n    const onVideoPress=()=>{\r\n        if(isVideoPlaying){\r\n             //stop the video\r\n             videoRef.current.pause()\r\n             setIsVideoPlaying(false);\r\n        }\r\n        else{\r\n            //play the video\r\n            videoRef.current.play();\r\n            setIsVideoPlaying(true);\r\n        }\r\n       \r\n    }\r\n    return(\r\n        <div className=\"videocard\">\r\n            <VideoHeader/>\r\n            <video\r\n                ref={videoRef}\r\n                onClick={onVideoPress}\r\n                className=\"videocard_player\"\r\n                src={url}\r\n                alt='IG reels video'\r\n                loop\r\n            />\r\n            <VideoFooter\r\n                channel={channel}\r\n                likes={likes}\r\n                shares={shares}\r\n                avatarSrc={avatarSrc}\r\n                song={song}\r\n                />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoCard;","import firebase from \"firebase\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCE2oosZGmrjtLadwk7MuNp0ksUfYD86p8\",\r\n    authDomain: \"ig-reels-38330.firebaseapp.com\",\r\n    databaseURL: \"https://ig-reels-38330.firebaseio.com\",\r\n    projectId: \"ig-reels-38330\",\r\n    storageBucket: \"ig-reels-38330.appspot.com\",\r\n    messagingSenderId: \"1011215090526\",\r\n    appId: \"1:1011215090526:web:a8e49fb6302eb49e0145cf\",\r\n    measurementId: \"G-4NJQ80XL6M\"\r\n  };\r\n\r\n  const firebaseApp=firebase.initializeApp(firebaseConfig);\r\n  const db=firebaseApp.firestore();\r\n\r\n  export default db;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport VideoCard from './VideoCard';\nimport db from \"./firebase\";\n\nfunction App() {\nconst [reels, setReels]=useState([]);\n\nuseEffect(() =>{\n  //app compo will run one wen it loads and never again\n  db.collection('reels').onSnapshot(snapshot =>{\n    setReels(snapshot.docs.map(doc =>doc.data() ))    //docs.map access the data from the reels folder in the database \n  })\n},[])\n\n\n  return (\n    <div className=\"app\">\n      {/* logo at the top  */}\n    <div className=\"app_top\">\n      <img src=\"https://www.transparentpng.com/thumb/logo-instagram/C3469L-new-logo-instagram-clipart-photos.png\"\n      className=\"app_logo\"\n      />\n      <h1>Reels</h1>\n    </div>\n    {/* Scrollable container of videos */}\n      <div className=\"app_videos\">\n        {reels.map( ( { channel, avatarSrc, likes, shares, url, song } ) =>(\n            <VideoCard\n            channel= {channel}\n            avatarSrc={avatarSrc}\n            song= {song}\n            url= {url}\n            likes={likes}\n            shares={shares}\n          />\n          \n        ))}\n        \n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n//react hooks\n//useref\n//onsnapshot\n//setting firebase\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}